
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { EnhancedLegalReferences } from '@/components/EnhancedLegalReferences';
import { ThinkingStepsDisplay } from '@/components/ThinkingStepsDisplay';
import { ArrowLeft, Scale, Copy, Download, FileDown, RotateCcw, Moon, Sun } from 'lucide-react';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import { useToast } from '@/hooks/use-toast';
import { format } from 'date-fns';
import { LegalAnalysis } from '@/types/api';
import { useTheme } from 'next-themes';

const Results = () => {
  const { toast } = useToast();
  const { theme, setTheme } = useTheme();
  const location = useLocation();
  const navigate = useNavigate();
  const analysis = location.state?.analysis as LegalAnalysis;
  const [isExporting, setIsExporting] = useState(false);

  // Redirect if no analysis data
  React.useEffect(() => {
    if (!analysis) {
      navigate('/analyze');
    }
  }, [analysis, navigate]);

  if (!analysis) {
    return null;
  }

  const handleCopyAnalysis = async () => {
    const textToCopy = analysis.formatted_analysis || analysis.final_answer;
    try {
      await navigator.clipboard.writeText(textToCopy);
      toast({
        title: "Copied to Clipboard",
        description: "Legal analysis has been copied to your clipboard.",
      });
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Unable to copy to clipboard. Please try again.",
        variant: "destructive"
      });
    }
  };

  const handleDownloadReport = () => {
    const textToDownload = analysis.formatted_analysis || analysis.final_answer;
    const blob = new Blob([textToDownload], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `legal-analysis-${format(new Date(analysis.analysis_date), 'yyyy-MM-dd')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast({
      title: "Report Downloaded",
      description: "Legal analysis report has been downloaded.",
    });
  };

  const handleExportToPDF = async () => {
    setIsExporting(true);
    try {
      // In a real implementation, you would use a PDF library like jsPDF or send to a backend service
      const content = analysis.formatted_analysis || analysis.final_answer;
      const filename = `legal-analysis-${format(new Date(analysis.analysis_date), 'yyyy-MM-dd')}.html`;
      
      // Create a formatted HTML document for printing/PDF conversion
      const htmlContent = `
        <!DOCTYPE html>
        <html>
        <head>
          <title>Legal Analysis Report - ${analysis.case_name}</title>
          <style>
            body { font-family: 'Times New Roman', serif; line-height: 1.6; margin: 2cm; }
            h1, h2, h3 { color: #2563eb; margin-top: 2em; }
            h1 { border-bottom: 2px solid #2563eb; padding-bottom: 0.5em; }
            .header { text-align: center; margin-bottom: 2em; }
            .footer { margin-top: 3em; font-size: 0.9em; color: #666; }
            @media print { body { margin: 1cm; } }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>Legal Analysis Report</h1>
            <p><strong>Case:</strong> ${analysis.case_name}</p>
            <p><strong>Date:</strong> ${format(new Date(analysis.analysis_date), 'PPP')}</p>
          </div>
          ${content}
          <div class="footer">
            <p><em>This report was generated by AI legal analysis tools and should not be considered as professional legal advice.</em></p>
          </div>
        </body>
        </html>
      `;
      
      const blob = new Blob([htmlContent], { type: 'text/html' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      toast({
        title: "HTML Report Generated",
        description: "Open the downloaded file in a browser and use Print > Save as PDF for PDF export.",
      });
    } catch (error) {
      toast({
        title: "Export Failed",
        description: "Unable to export report. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsExporting(false);
    }
  };

  const renderAnalysisContent = (content: string) => {
    // Handle undefined or null content
    if (!content) {
      return (
        <div className="my-6 p-6 bg-amber-50 dark:bg-amber-950/20 rounded-lg border border-amber-200 dark:border-amber-800">
          <p className="text-slate-500 dark:text-slate-400 italic text-center">
            No analysis content available. Please try generating a new analysis.
          </p>
        </div>
      );
    }

    // Clean up markdown artifacts and code block markers
    let cleanContent = content;
    
    // Remove markdown code block markers (```html, ```, etc.)
    cleanContent = cleanContent.replace(/^```[a-zA-Z]*\n?/gm, '');
    cleanContent = cleanContent.replace(/\n?```$/gm, '');
    
    // Remove standalone backticks at the beginning and end
    cleanContent = cleanContent.replace(/^`+\s*/m, '');
    cleanContent = cleanContent.replace(/\s*`+$/m, '');
    
    // Remove "html" text that appears at the beginning
    cleanContent = cleanContent.replace(/^html\s*/i, '');
    
    // Trim whitespace
    cleanContent = cleanContent.trim();

    // Decode HTML entities if present (e.g., &lt;div&gt;) so real HTML renders
    const hasLiteralTags = /<\w+[\s\S]*>/i.test(cleanContent);
    const hasEntities = /&lt;|&gt;|&amp;|&quot;|&#39;/i.test(cleanContent);
    if (!hasLiteralTags && hasEntities) {
      cleanContent = cleanContent
        .replace(/&lt;/g, '<')
        .replace(/&gt;/g, '>')
        .replace(/&quot;/g, '"')
        .replace(/&#39;/g, "'")
        .replace(/&amp;/g, '&');
    }

    // If full HTML document provided, extract <body> content
    if (/<body[\s\S]*?>[\s\S]*<\/body>/i.test(cleanContent)) {
      const bodyMatch = cleanContent.match(/<body[\s\S]*?>([\s\S]*?)<\/body>/i);
      if (bodyMatch && bodyMatch[1]) cleanContent = bodyMatch[1];
    }

    // If the content is already HTML (contains HTML tags), render it directly with enhanced styling
    if (/<\w+[\s\S]*>/i.test(cleanContent)) {
      return (
        <div>
          <style dangerouslySetInnerHTML={{
            __html: `
              .legal-analysis-content {
                font-family: 'Georgia', 'Times New Roman', serif;
                line-height: 1.8;
                color: hsl(var(--foreground));
              }
              .legal-analysis-content h1 {
                font-size: 2.5rem;
                font-weight: 700;
                color: hsl(var(--primary));
                border-bottom: 3px solid hsl(var(--primary));
                padding-bottom: 1rem;
                margin-bottom: 2rem;
                margin-top: 3rem;
                text-align: center;
                background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--accent)));
                background-clip: text;
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
              }
              .legal-analysis-content h2 {
                font-size: 2rem;
                font-weight: 600;
                color: hsl(var(--primary));
                margin-top: 3rem;
                margin-bottom: 1.5rem;
                position: relative;
                padding-left: 1.5rem;
                padding-bottom: 0.5rem;
                border-bottom: 2px solid hsl(var(--border));
              }
              .legal-analysis-content h2::before {
                content: '';
                position: absolute;
                left: 0;
                top: 0;
                bottom: 0;
                width: 6px;
                background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--accent)));
                border-radius: 3px;
              }
              .legal-analysis-content h3 {
                font-size: 1.5rem;
                font-weight: 600;
                color: hsl(var(--foreground));
                margin-top: 2.5rem;
                margin-bottom: 1rem;
                position: relative;
                padding-left: 1rem;
              }
              .legal-analysis-content h3::before {
                content: 'ยง';
                position: absolute;
                left: 0;
                top: 0;
                color: hsl(var(--primary));
                font-weight: 700;
              }
              .legal-analysis-content h4 {
                font-size: 1.25rem;
                font-weight: 600;
                color: hsl(var(--foreground));
                margin-top: 2rem;
                margin-bottom: 0.75rem;
                text-decoration: underline;
                text-decoration-color: hsl(var(--primary));
                text-decoration-thickness: 2px;
                text-underline-offset: 4px;
              }
              .legal-analysis-content p {
                line-height: 1.8;
                margin-bottom: 1.5rem;
                color: hsl(var(--foreground));
                text-align: justify;
                text-indent: 2rem;
                font-size: 1.1rem;
              }
              .legal-analysis-content ul, .legal-analysis-content ol {
                margin: 1.5rem 0;
                padding-left: 2rem;
              }
              .legal-analysis-content li {
                margin-bottom: 0.75rem;
                line-height: 1.7;
                color: hsl(var(--foreground));
                font-size: 1.05rem;
              }
              .legal-analysis-content ul li::marker {
                color: hsl(var(--primary));
                font-weight: bold;
              }
              .legal-analysis-content ol li::marker {
                color: hsl(var(--primary));
                font-weight: bold;
              }
              .legal-analysis-content strong, .legal-analysis-content b {
                font-weight: 700;
                color: hsl(var(--primary));
                background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--accent)));
                background-clip: text;
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
              }
              .legal-analysis-content em, .legal-analysis-content i {
                font-style: italic;
                color: hsl(var(--muted-foreground));
                font-weight: 500;
              }
              .legal-analysis-content a {
                color: hsl(var(--primary));
                text-decoration: underline;
                text-decoration-thickness: 2px;
                text-underline-offset: 3px;
                font-weight: 500;
                transition: all 0.2s ease;
              }
              .legal-analysis-content a:hover {
                color: hsl(var(--accent));
                text-decoration-thickness: 3px;
                text-shadow: 0 0 8px hsl(var(--primary) / 0.3);
              }
              .legal-analysis-content blockquote {
                border-left: 6px solid hsl(var(--primary));
                padding: 1.5rem 2rem;
                margin: 2rem 0;
                background: linear-gradient(135deg, hsl(var(--muted)), hsl(var(--card)));
                border-radius: 0 0.75rem 0.75rem 0;
                font-style: italic;
                font-size: 1.1rem;
                position: relative;
                box-shadow: 0 4px 20px hsl(var(--foreground) / 0.1);
              }
              .legal-analysis-content blockquote::before {
                content: '"';
                position: absolute;
                top: -0.5rem;
                left: 1rem;
                font-size: 4rem;
                color: hsl(var(--primary));
                font-family: 'Times New Roman', serif;
                opacity: 0.3;
              }
              .legal-analysis-content code {
                background: hsl(var(--muted));
                padding: 0.25rem 0.75rem;
                border-radius: 0.5rem;
                font-family: 'Monaco', 'Menlo', 'Consolas', monospace;
                font-size: 0.9em;
                border: 1px solid hsl(var(--border));
                color: hsl(var(--primary));
                font-weight: 500;
              }
              .legal-analysis-content pre {
                background: hsl(var(--muted));
                padding: 1.5rem;
                border-radius: 0.75rem;
                overflow-x: auto;
                margin: 2rem 0;
                border: 1px solid hsl(var(--border));
                box-shadow: inset 0 2px 8px hsl(var(--foreground) / 0.1);
              }
              .legal-analysis-content table {
                width: 100%;
                border-collapse: collapse;
                margin: 2rem 0;
                font-size: 1rem;
                box-shadow: 0 4px 20px hsl(var(--foreground) / 0.1);
                border-radius: 0.75rem;
                overflow: hidden;
              }
              .legal-analysis-content th, .legal-analysis-content td {
                border: 1px solid hsl(var(--border));
                padding: 1rem;
                text-align: left;
              }
              .legal-analysis-content th {
                background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--accent)));
                color: white;
                font-weight: 600;
                text-transform: uppercase;
                letter-spacing: 0.5px;
              }
              .legal-analysis-content td {
                background: hsl(var(--card));
              }
              .legal-analysis-content tr:nth-child(even) td {
                background: hsl(var(--muted));
              }
            `
          }} />
          <div 
            className="legal-analysis-content max-w-none"
            dangerouslySetInnerHTML={{ __html: cleanContent }} 
          />
        </div>
      );
    }

    // If it's plain text/markdown, process it with our existing formatter
    const processInlineFormatting = (text: string) => {
      // Handle bold text (**text** or __text__)
      text = text.replace(/\*\*(.*?)\*\*/g, '<strong class="font-bold text-slate-900 dark:text-slate-100">$1</strong>');
      text = text.replace(/__(.*?)__/g, '<strong class="font-bold text-slate-900 dark:text-slate-100">$1</strong>');
      
      // Handle italic text (*text* or _text_)
      text = text.replace(/\*(.*?)\*/g, '<em class="italic text-slate-800 dark:text-slate-200">$1</em>');
      text = text.replace(/_(.*?)_/g, '<em class="italic text-slate-800 dark:text-slate-200">$1</em>');
      
      // Handle inline code (`code`)
      text = text.replace(/`([^`]+)`/g, '<code class="px-2 py-1 bg-slate-100 dark:bg-slate-800 rounded text-sm font-mono text-blue-600 dark:text-blue-400">$1</code>');
      
      return text;
    };

    // Split content into sections and format as professional legal document
    const sections = cleanContent.split('\n\n');
    
    return sections.map((section, index) => {
      const trimmed = section.trim();
      if (!trimmed) return null;
      
      // Main headers (## or #)
      if (trimmed.startsWith('## ') || (trimmed.startsWith('# ') && !trimmed.startsWith('### '))) {
        const headerText = trimmed.replace(/^#{1,2}\s+/, '').trim();
        return (
          <div key={index} className="mt-12 first:mt-0 mb-6">
            <h2 className="text-3xl font-bold text-slate-900 dark:text-slate-100 pb-3 border-b-3 border-gradient-to-r from-blue-600 to-purple-600">
              <div className="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                {headerText}
              </div>
            </h2>
            <div className="h-1 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full mt-2 mb-6"></div>
          </div>
        );
      }
      
      // Sub headers (###)
      if (trimmed.startsWith('### ')) {
        const headerText = trimmed.replace('### ', '').trim();
        return (
          <div key={index} className="mt-8 mb-4">
            <h3 className="text-xl font-semibold text-slate-800 dark:text-slate-200 flex items-center">
              <div className="w-2 h-6 bg-amber-500 rounded-full mr-3"></div>
              {headerText}
            </h3>
          </div>
        );
      }
      
      // Handle multi-line lists (numbered)
      if (/^\d+\./.test(trimmed)) {
        const listItems = trimmed.split('\n').filter(line => line.trim());
        return (
          <ol key={index} className="space-y-3 my-6 pl-6">
            {listItems.map((line, lineIndex) => {
              const cleanLine = line.replace(/^\d+\.\s*/, '').trim();
              return (
                <li key={lineIndex} className="flex items-start">
                  <span className="flex-shrink-0 w-8 h-8 bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-400 rounded-full flex items-center justify-center text-sm font-semibold mr-4 mt-1">
                    {lineIndex + 1}
                  </span>
                  <div 
                    className="text-slate-700 dark:text-slate-300 leading-relaxed flex-1"
                    dangerouslySetInnerHTML={{ __html: processInlineFormatting(cleanLine) }}
                  />
                </li>
              );
            })}
          </ol>
        );
      }
      
      // Handle multi-line lists (bullets)
      if (trimmed.startsWith('- ') || trimmed.startsWith('* ')) {
        const listItems = trimmed.split('\n').filter(line => line.trim() && (line.trim().startsWith('- ') || line.trim().startsWith('* ')));
        return (
          <ul key={index} className="space-y-3 my-6 pl-6">
            {listItems.map((line, lineIndex) => {
              const cleanLine = line.replace(/^[-*]\s*/, '').trim();
              return (
                <li key={lineIndex} className="flex items-start">
                  <div className="flex-shrink-0 w-2 h-2 bg-amber-500 rounded-full mr-4 mt-3"></div>
                  <div 
                    className="text-slate-700 dark:text-slate-300 leading-relaxed flex-1"
                    dangerouslySetInnerHTML={{ __html: processInlineFormatting(cleanLine) }}
                  />
                </li>
              );
            })}
          </ul>
        );
      }
      
      // Important notes or quotes (indented content)
      if (trimmed.startsWith('  ') || trimmed.startsWith('>')) {
        const content = trimmed.replace(/^(  |> ?)/, '').trim();
        return (
          <div key={index} className="my-6 p-6 bg-gradient-to-r from-amber-50 to-orange-50 dark:from-amber-900/20 dark:to-orange-900/20 rounded-xl border-l-4 border-amber-500 shadow-sm">
            <div className="flex items-start">
              <div className="flex-shrink-0 w-8 h-8 bg-amber-500 rounded-full flex items-center justify-center mr-4">
                <span className="text-white text-sm font-bold">!</span>
              </div>
              <div 
                className="text-slate-700 dark:text-slate-300 leading-relaxed font-medium"
                dangerouslySetInnerHTML={{ __html: processInlineFormatting(content) }}
              />
            </div>
          </div>
        );
      }
      
      // Regular paragraphs with rich formatting
      return (
        <div key={index} className="my-6">
          <p 
            className="text-slate-700 dark:text-slate-300 leading-relaxed text-base"
            dangerouslySetInnerHTML={{ __html: processInlineFormatting(trimmed) }}
          />
        </div>
      );
    }).filter(Boolean);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-950 dark:to-slate-900">
      {/* Professional Header */}
      <header className="bg-white/95 dark:bg-slate-900/95 backdrop-blur-lg border-b border-slate-200 dark:border-slate-800 sticky top-0 z-50 shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            {/* Left Navigation */}
            <div className="flex items-center gap-4">
              <Link to="/analyze">
                <Button variant="ghost" size="sm" className="text-slate-600 hover:text-slate-900 dark:text-slate-400 dark:hover:text-slate-100">
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  New Analysis
                </Button>
              </Link>
              <Link to="/">
                <Button variant="ghost" size="sm" className="text-slate-600 hover:text-slate-900 dark:text-slate-400 dark:hover:text-slate-100">
                  <Scale className="w-4 h-4 mr-2" />
                  Home
                </Button>
              </Link>
            </div>

            {/* Center Branding */}
            <div className="flex items-center gap-3">
              <div className="flex items-center gap-2">
                <Scale className="w-8 h-8 text-amber-600" />
                <div className="text-center">
                  <h1 className="text-xl font-bold text-slate-900 dark:text-slate-100">LegalAI Pro</h1>
                  <p className="text-xs text-slate-600 dark:text-slate-400">Professional Legal Analysis</p>
                </div>
              </div>
            </div>
            
            {/* Right Actions */}
            <div className="flex items-center gap-2">
              <Button 
                variant="ghost" 
                size="sm"
                onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
                className="text-slate-600 hover:text-slate-900 dark:text-slate-400 dark:hover:text-slate-100"
              >
                {theme === 'dark' ? <Sun className="w-4 h-4" /> : <Moon className="w-4 h-4" />}
              </Button>
              <Button onClick={handleCopyAnalysis} variant="outline" size="sm" className="border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-800 text-slate-700 dark:text-slate-300 hover:bg-slate-50 dark:hover:bg-slate-700">
                <Copy className="w-4 h-4 mr-2" />
                Copy
              </Button>
              <Button onClick={handleDownloadReport} variant="outline" size="sm" className="border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-800 text-slate-700 dark:text-slate-300 hover:bg-slate-50 dark:hover:bg-slate-700">
                <Download className="w-4 h-4 mr-2" />
                Text
              </Button>
              <Button 
                onClick={handleExportToPDF} 
                variant="outline" 
                size="sm"
                disabled={isExporting}
                className="border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-800 text-slate-700 dark:text-slate-300 hover:bg-slate-50 dark:hover:bg-slate-700"
              >
                <FileDown className="w-4 h-4 mr-2" />
                {isExporting ? 'Exporting...' : 'HTML'}
              </Button>
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="space-y-8">
          {/* Case Information Header */}
          <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl p-8 text-white">
            <h1 className="text-3xl font-bold mb-4">{analysis.case_name}</h1>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-blue-100">
              <div>
                <span className="block text-sm font-medium">Analysis Date</span>
                <span className="block text-lg">{format(new Date(analysis.analysis_date), 'PPP')}</span>
              </div>
              <div>
                <span className="block text-sm font-medium">Processing Time</span>
                <span className="block text-lg">{analysis.processing_time}s</span>
              </div>
              <div>
                <span className="block text-sm font-medium">Analysis Steps</span>
                <span className="block text-lg">{analysis.total_steps}</span>
              </div>
            </div>
          </div>

          {/* AI Thinking Process */}
          {analysis.thinking_steps && analysis.thinking_steps.length > 0 && (
            <ThinkingStepsDisplay steps={analysis.thinking_steps} />
          )}

          {/* Professional Legal Analysis Document */}
          <div className="bg-white dark:bg-slate-900 rounded-xl shadow-lg border border-slate-200 dark:border-slate-800 overflow-hidden">
            <div className="bg-gradient-to-r from-blue-600 to-purple-600 px-8 py-6">
              <h1 className="text-3xl font-bold mb-2 !text-white">Legal Analysis Report</h1>
              <p className="!text-white opacity-90">
                Comprehensive AI-powered legal case analysis with professional formatting
              </p>
            </div>
            
            <div className="p-8">
              <div className="max-w-none">
                {renderAnalysisContent(analysis.formatted_analysis || analysis.final_answer)}
              </div>
            </div>
          </div>

          {/* Enhanced Legal References */}
          {analysis.references && analysis.references.length > 0 && (
            <EnhancedLegalReferences 
              references={analysis.references}
              linkSummaries={analysis.link_summaries || []}
            />
          )}

          {/* Professional Action Buttons */}
          <div className="bg-white dark:bg-slate-900 rounded-xl shadow-sm border border-slate-200 dark:border-slate-800 p-6">
            <div className="flex flex-wrap gap-4 justify-center">
              <Link to="/analyze">
                <Button size="lg" className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white shadow-lg">
                  <RotateCcw className="w-5 h-5 mr-2" />
                  New Analysis
                </Button>
              </Link>
              <Button onClick={handleCopyAnalysis} variant="outline" size="lg" className="border-slate-300 dark:border-slate-600 hover:bg-slate-50 dark:hover:bg-slate-800">
                <Copy className="w-5 h-5 mr-2" />
                Copy Full Report
              </Button>
              <Button onClick={handleDownloadReport} variant="outline" size="lg" className="border-slate-300 dark:border-slate-600 hover:bg-slate-50 dark:hover:bg-slate-800">
                <Download className="w-5 h-5 mr-2" />
                Download Text
              </Button>
              <Button 
                onClick={handleExportToPDF} 
                variant="outline" 
                size="lg" 
                disabled={isExporting}
                className="border-slate-300 dark:border-slate-600 hover:bg-slate-50 dark:hover:bg-slate-800"
              >
                <FileDown className="w-5 h-5 mr-2" />
                {isExporting ? 'Exporting...' : 'Export HTML'}
              </Button>
            </div>
            
            {/* Legal Disclaimer */}
            <div className="mt-6 p-4 bg-slate-50 dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700">
              <p className="text-xs text-slate-600 dark:text-slate-400 text-center">
                <strong>Professional Disclaimer:</strong> This AI-generated legal analysis is for informational purposes only and does not constitute professional legal advice. 
                Always consult with a qualified attorney for specific legal matters. This tool is designed to assist legal professionals and should not replace human judgment.
              </p>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default Results;
